[
    {
        "question": "Show me some options for paneer dishes from restaurants that have atleast 1 rating.",
        "query": "\n    MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)-[:COMES_UNDER]->(c:Category)\n    WHERE toLower(f.name) CONTAINS \" paneer \"\n    AND r.delivery_rating <> \"not_available\"\n    AND toFloat(r.delivery_rating) > 1\n    RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n    "
    },
    {
        "question": "I\u2019m looking for veg pasta options that cost less than 300, ordering for 4 persons. Can you help?",
        "query": "\n    MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)-[:COMES_UNDER]->(c:Category)\n    WHERE toLower(f.name) CONTAINS \" pasta \"\n    AND toLower(f.type) = \"veg\"\n    AND f.price < 300\n    RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      4 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n    "
    },
    {
        "question": "I\u2019m looking for non-veg pasta options that cost less than 300. Can you help?",
        "query": "\n    MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)-[:COMES_UNDER]->(c:Category)\n    WHERE toLower(f.name) CONTAINS \" pasta \"\n    AND toLower(f.type) = \"non-veg\"\n    AND f.price < 300\n      RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n    "
    },
    {
        "question": "Show me where I can get ras malai.",
        "query": "\n    MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)-[:COMES_UNDER]->(c:Category)\n    WHERE toLower(f.name) CONTAINS \"ras malai\"\n    RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n    "
    },
    {
        "question": "I want to eat some Spanish food. What options do I have?",
        "query": "\n    MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)-[:COMES_UNDER]->(c:Category)\n    WHERE toLower(c.name) CONTAINS \" spanish \" OR toLower(f.desc) CONTAINS \" spanish \"\n    RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n    "
    },
    {
        "question": "What\u2019s the most expensive dish you have? Show me the top 10.",
        "query": "\n    MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)\n    OPTIONAL MATCH (f)-[:COMES_UNDER]->(c:Category)\n    RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n    LIMIT 10\n    "
    },
    {
        "question": "What\u2019s the cheapest options you have? Show me the top 10.",
        "query": "\n    MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)\n    OPTIONAL MATCH (f)-[:COMES_UNDER]->(c:Category)\n    RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price ASC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n    LIMIT 10\n    "
    },
    {
        "question": "Any Indian sweets with kaju, like burfi or katli, available nearby, need 3 units?",
        "query": "\n    MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)-[:COMES_UNDER]->(c:Category)\n    WHERE (toLower(f.name) CONTAINS \"kaju\" OR toLower(f.desc) CONTAINS \"kaju\") AND (toLower(c.name) CONTAINS \"dessert\" OR toLower(c.name) CONTAINS \"sweet\")\n      RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      3 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price ASC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n    "
    },
    {
        "question": "Can you give me places where I can get Kadai Paneer and two naan for a low price? Veg only please.",
        "query": "\n    MATCH (r:Restaurant)-[:DELIVERS]->(bp:Food)\n    WHERE bp.type = \"veg\" AND\n          toLower(bp.name) =~ '(^|[^a-zA-Z])kadai paneer([^a-zA-Z]|$)'\n\n    MATCH (r)-[:DELIVERS]->(n1:Food)\n    WHERE toLower(n1.name) =~ '^(\\w+\\s)?(\\w+\\s)?(\\w+\\s)?naan$'\n\n    MATCH (r)-[:DELIVERS]->(n2:Food)\n    WHERE toLower(n2.name) =~ '^(\\w+\\s)?(\\w+\\s)?(\\w+\\s)?naan$' AND n1.id < n2.id\n\n    WITH r.name AS restaurant,\n        r.url as zomato_page,\n        bp.name AS main_dish,\n        n1.name AS naan_1,\n        n2.name AS naan_2,\n        round(bp.price + n1.price + n2.price, 2) AS total_price\n\n    ORDER BY total_price ASC\n\n    RETURN restaurant, main_dish, naan_1, naan_2, total_price, zomato_page\n    "
    },
    {
        "question": "Show me top-rated restaurants that list juices in their menu or deliverables.",
        "query": "\n      MATCH (r:Restaurant)\n      WHERE toLower(r.deliverables) CONTAINS \"juices\"\n        AND r.delivery_rating IS NOT NULL\n        AND r.delivery_rating <> \"not_available\"\n      WITH r, toFloat(r.delivery_rating) AS delivery_rating\n      RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url AS zomato_page,\n      r.image_url AS restaurant_image_url,\n      CASE\n        WHEN r.delivery_rating IS NOT NULL AND r.delivery_rating <> 'not_available' THEN r.delivery_rating\n        ELSE NULL\n      END AS delivery_rating,\n      CASE\n        WHEN r.dining_rating IS NOT NULL AND r.dining_rating <> 'not_available' THEN r.dining_rating\n        ELSE NULL\n      END AS dining_rating,\n      r.deliverables AS deliverables,\n      r.phone_no AS phone_number,\n      r.address AS address\n      ORDER BY COALESCE(toFloatOrNull(delivery_rating), 0) DESC\n      "
    },
    {
        "question": "Hey, Are there any good italian restaurants, don't show me spanto restaurant?",
        "query": "\n      MATCH (r:Restaurant)\n      WHERE toLower(r.deliverables) CONTAINS \"italian\"\n        AND r.delivery_rating IS NOT NULL\n        AND r.delivery_rating <> \"not_available\"\n        AND NOT toLower(r.name) CONTAINS \"spanto\"\n      WITH r, toFloat(r.delivery_rating) AS delivery_rating\n      RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url AS zomato_page,\n      r.image_url AS restaurant_image_url,\n      CASE\n        WHEN r.delivery_rating IS NOT NULL AND r.delivery_rating <> 'not_available' THEN r.delivery_rating\n        ELSE NULL\n      END AS delivery_rating,\n      CASE\n        WHEN r.dining_rating IS NOT NULL AND r.dining_rating <> 'not_available' THEN r.dining_rating\n        ELSE NULL\n      END AS dining_rating,\n      r.deliverables AS deliverables,\n      r.phone_no AS phone_number,\n      r.address AS address\n      ORDER BY COALESCE(toFloatOrNull(delivery_rating), 0) DESC\n      "
    },
    {
        "question": "Hey, what are the options for juice available at Sunny's Juices & Shakes?",
        "query": "\n      MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)\n      WHERE (toLower(r.name) CONTAINS \"sunny's juices & shakes\") AND (toLower(f.name) CONTAINS \"juice\" OR toLower(f.desc) CONTAINS \"juice\")\n      RETURN DISTINCT r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price ASC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n      "
    },
    {
        "question": "Which is the most expensive pizza you have at dominos, ordering for 2 persons.",
        "query": "\n      MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)-[:COMES_UNDER]->(c:Category)\n      WHERE (toLower(f.name) CONTAINS \"pizza\" OR toLower(f.desc) CONTAINS \"pizza\")\n      AND (toLower(r.name) CONTAINS \"dominos\")\n      RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      2 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n      LIMIT 1\n      "
    },
    {
        "question": "Show all the bestselling food items at zomato.",
        "query": "\n      MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)\n      WHERE f.bestseller = true\n      OPTIONAL MATCH (f)-[:COMES_UNDER]->(c:Category)\n      RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n      "
    },
    {
        "question": "Can you show popular menu items from well-rated restaurants?",
        "query": "\n      MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)\n      WHERE f.bestseller = true\n        AND r.delivery_rating IS NOT NULL\n        AND r.delivery_rating <> 'not_available'\n        AND r.delivery_rating <> 'non_available'\n        AND toFloat(r.delivery_rating) > 2.0\n      RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n      "
    },
    {
        "question": "Give me bestseller food options where the restaurant has a decent delivery rating.",
        "query": "\n      MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)\n      WHERE f.bestseller = true\n        AND r.delivery_rating IS NOT NULL\n        AND r.delivery_rating <> 'not_available'\n        AND r.delivery_rating <> 'non_available'\n        AND toFloat(r.delivery_rating) > 2.0\n      RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n      "
    },
    {
        "question": "Give me combos of thali and basic lassi options at restaurants.",
        "query": "\n      MATCH (r:Restaurant)-[:DELIVERS]->(thali:Food)\n      WHERE toLower(thali.name) CONTAINS \"thali\"\n\n      MATCH (r)-[:DELIVERS]->(lassi:Food)\n      WHERE toLower(lassi.name) =~ '^lassi.*'  // ensures \"lassi\" is at the beginning\n\n      WITH r, thali, lassi\n      RETURN\n        r.name AS restaurant,\n        r.url AS zomato_page,\n\n        thali.name AS thali_name,\n        thali.price AS thali_price,\n        CASE\n          WHEN thali.rating IS NOT NULL AND thali.rating <> 'not_available' THEN thali.rating\n          ELSE NULL\n        END AS thali_rating,\n        thali.desc AS thali_description,\n        thali.image_url AS thali_image,\n        \"Thali\" AS thali_category,\n\n        lassi.name AS lassi_name,\n        lassi.price AS lassi_price,\n        CASE\n          WHEN lassi.rating IS NOT NULL AND lassi.rating <> 'not_available' THEN lassi.rating\n          ELSE NULL\n        END AS lassi_rating,\n        lassi.desc AS lassi_description,\n        lassi.image_url AS lassi_image,\n        \"Lassi\" AS lassi_category\n      "
    },
    {
        "question": "I want plain lassi without any flavor",
        "query": "\n    MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)\n    WHERE toLower(f.name) =~ '^lassi.*'\n      AND NOT toLower(f.name) CONTAINS \"mango\"\n      AND NOT toLower(f.name) CONTAINS \"sweet\"\n      AND NOT toLower(f.name) CONTAINS \"flavored\"\n    RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n    "
    },
    {
        "question": "Looking for roti without butter",
        "query": "\n    MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)\n    WHERE toLower(f.name) CONTAINS \"roti\"\n      AND NOT toLower(f.name) CONTAINS \"butter\"\n    RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url  AS zomato_page,\n      r.delivery_rating AS delivery_rating,\n      f.name AS food_name,\n      f.bestseller AS bestseller,\n      f.price AS price,\n      f.type AS food_type,\n      1 AS quantity,\n      CASE\n        WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n        ELSE NULL\n      END AS food_rating,\n      f.desc AS description,\n      f.image_url AS food_image_url\n      ORDER BY f.price DESC, COALESCE(toFloatOrNull(food_rating), 0) DESC\n    "
    },
    {
        "question": "What all restaurants are available near connaught place?",
        "query": "\n      MATCH (r:Restaurant)\n      WHERE toLower(r.address) CONTAINS \"connaught place\"\n      RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url AS zomato_page,\n      r.image_url AS restaurant_image_url,\n      CASE\n        WHEN r.delivery_rating IS NOT NULL AND r.delivery_rating <> 'not_available' THEN r.delivery_rating\n        ELSE NULL\n      END AS delivery_rating,\n      CASE\n        WHEN r.dining_rating IS NOT NULL AND r.dining_rating <> 'not_available' THEN r.dining_rating\n        ELSE NULL\n      END AS dining_rating,\n      r.deliverables AS deliverables,\n      r.phone_no AS phone_number,\n      r.address AS address\n      ORDER BY COALESCE(toFloatOrNull(delivery_rating), 0) DESC\n      "
    },
    {
        "question": "What all restaurants are available near connaught place which serves italian as well?",
        "query": "\n      MATCH (r:Restaurant)\n      WHERE toLower(r.address) CONTAINS \"connaught place\"\n      AND toLower(r.deliverables) CONTAINS \"italian\"\n      RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url AS zomato_page,\n      r.image_url AS restaurant_image_url,\n      CASE\n        WHEN r.delivery_rating IS NOT NULL AND r.delivery_rating <> 'not_available' THEN r.delivery_rating\n        ELSE NULL\n      END AS delivery_rating,\n      CASE\n        WHEN r.dining_rating IS NOT NULL AND r.dining_rating <> 'not_available' THEN r.dining_rating\n        ELSE NULL\n      END AS dining_rating,\n      r.deliverables AS deliverables,\n      r.phone_no AS phone_number,\n      r.address AS address\n      ORDER BY COALESCE(toFloatOrNull(delivery_rating), 0) DESC\n      "
    },
    {
        "question": "Hey, can you confirm which restaurant has 1143595672 as its phone number?",
        "query": "\n      MATCH (r:Restaurant)\n      WHERE toLower(r.phone_no) CONTAINS \"1143595672\"\n      RETURN r.id AS restaurant_id,\n      r.name AS restaurant,\n      r.url AS zomato_page,\n      r.image_url AS restaurant_image_url,\n      CASE\n        WHEN r.delivery_rating IS NOT NULL AND r.delivery_rating <> 'not_available' THEN r.delivery_rating\n        ELSE NULL\n      END AS delivery_rating,\n      CASE\n        WHEN r.dining_rating IS NOT NULL AND r.dining_rating <> 'not_available' THEN r.dining_rating\n        ELSE NULL\n      END AS dining_rating,\n      r.deliverables AS deliverables,\n      r.phone_no AS phone_number,\n      r.address AS address\n      ORDER BY COALESCE(toFloatOrNull(delivery_rating), 0) DESC\n      "
    },
    {
        "question": "Hey, which is the worst rated dish you have at zomato?",
        "query": "\n      MATCH (r:Restaurant)-[:DELIVERS]->(f:Food)\n      WHERE f.rating IS NOT NULL AND f.rating <> \"not_available\"\n      RETURN r.id AS restaurant_id,\n        r.name AS restaurant,\n        r.url  AS zomato_page,\n        r.delivery_rating AS delivery_rating,\n        f.name AS food_name,\n        f.bestseller AS bestseller,\n        f.price AS price,\n        f.type AS food_type,\n        1 AS quantity,\n        CASE\n          WHEN f.rating IS NOT NULL AND f.rating <> 'not_available' THEN f.rating\n          ELSE NULL\n        END AS food_rating,\n        f.desc AS description,\n        f.image_url AS food_image_url\n      ORDER BY toFloat(f.rating) ASC\n      LIMIT 1\n      "
    }
]